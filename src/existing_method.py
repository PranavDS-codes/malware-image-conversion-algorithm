import os
import math
from PIL import Image

def getBinaryData(filename):
    binary_values = []
    with open(filename, 'rb') as fileobject:
        data = fileobject.read(1)
        while data != b'':
            binary_values.append(ord(data))
            data = fileobject.read(1)
    return binary_values

def createGreyScaleImage(filename, output_dir, width=None):
    greyscale_data = getBinaryData(filename)
    size = get_size(len(greyscale_data), width)
    save_file(filename, greyscale_data, size, 'L', output_dir)

def createRGBImage(filename, output_dir, width=None):
    index = 0
    rgb_data = []
    binary_data = getBinaryData(filename)
    while (index + 3) < len(binary_data):
        R = binary_data[index]
        G = binary_data[index + 1]
        B = binary_data[index + 2]
        index += 3
        rgb_data.append((R, G, B))
    size = get_size(len(rgb_data), width)
    save_file(filename, rgb_data, size, 'RGB', output_dir)

def save_file(filename, data, size, image_type, output_dir):
    try:
        image = Image.new(image_type, size)
        image.putdata(data)
        name, _ = os.path.splitext(os.path.basename(filename))
        imagename = f"{output_dir}/{name}_{image_type}.png"
        os.makedirs(os.path.dirname(imagename), exist_ok=True)
        image.save(imagename)
        print(f'The file {imagename} saved.')
    except Exception as err:
        print(err)

def get_size(data_length, width=None):
    if width is None:
        if data_length < 10240:
            width = 32
        elif 10240 <= data_length <= 10240 * 3:
            width = 64
        elif 10240 * 3 <= data_length <= 10240 * 6:
            width = 128
        elif 10240 * 6 <= data_length <= 10240 * 10:
            width = 256
        elif 10240 * 10 <= data_length <= 10240 * 20:
            width = 384
        elif 10240 * 20 <= data_length <= 10240 * 50:
            width = 512
        elif 10240 * 50 <= data_length <= 10240 * 100:
            width = 768
        else:
            width = 1024
        height = int(data_length / width) + 1
    else:
        width = int(math.sqrt(data_length)) + 1
        height = width
    return (width, height)

def process_files(input_path, output_dir_grey, output_dir_rgb, width=None, exe_limit=None):
    if os.path.isdir(input_path):
        exe_count = 0
        for root, directories, files in os.walk(input_path):
            for filename in files:
                if filename.lower().endswith('.exe'):
                    if exe_limit is not None and exe_count >= exe_limit:
                        return  # Stop processing once the limit is reached
                    file_path = os.path.join(root, filename)
                    createGreyScaleImage(file_path, output_dir_grey, width)
                    createRGBImage(file_path, output_dir_rgb, width)
                    exe_count += 1
    elif os.path.isfile(input_path) and input_path.lower().endswith('.exe'):
        createGreyScaleImage(input_path, output_dir_grey, width)
        createRGBImage(input_path, output_dir_rgb, width)
    else:
        print("The specified path does not exist or contains no .exe files.")

# Example usage:
# Specify the output directories for greyscale and RGB images
# process_files('path_to_your_file_or_directory', 'path_to_greyscale_output_dir', 'path_to_rgb_output_dir')
