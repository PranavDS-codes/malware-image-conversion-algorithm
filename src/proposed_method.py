import os
import math
from PIL import Image

def getBinaryData(filename):
    with open(filename, 'rb') as fileobject:
        return fileobject.read()

def createImage(filename, output_dir, mode='L', width=None):
    binary_data = getBinaryData(filename)
    size = get_size(len(binary_data) if mode == 'L' else len(binary_data) // 3, width)
    image_data = prepareImageData(binary_data, mode)
    save_file(filename, image_data, size, mode, output_dir)

def prepareImageData(binary_data, mode):
    if mode == 'L':  # Greyscale
        return list(binary_data)
    elif mode == 'RGB':  # RGB, ensure data length is a multiple of 3
        return [tuple(binary_data[i:i+3]) for i in range(0, len(binary_data)-len(binary_data)%3, 3)]

def get_size(data_length, width=None):
    if width is None:
        if data_length < 10240:
            width = 32
        elif 10240 <= data_length <= 10240 * 3:
            width = 64
        elif 10240 * 3 <= data_length <= 10240 * 6:
            width = 128
        elif 10240 * 6 <= data_length <= 10240 * 10:
            width = 256
        elif 10240 * 10 <= data_length <= 10240 * 20:
            width = 384
        elif 10240 * 20 <= data_length <= 10240 * 50:
            width = 512
        elif 10240 * 50 <= data_length <= 10240 * 100:
            width = 768
        else:
            width = 1024
    height = math.ceil(data_length / width)
    return (width, height)

def save_file(filename, data, size, image_type, output_dir):
    try:
        image = Image.new(image_type, size)
        image.putdata(data)
        name, _ = os.path.splitext(os.path.basename(filename))
        imagename = f"{output_dir}/{name}_{image_type}.png"
        os.makedirs(os.path.dirname(imagename), exist_ok=True)
        image.save(imagename)
        print(f'The file {imagename} saved.')
    except Exception as err:
        print(err)

def process_files(input_path, output_dir_grey, output_dir_rgb, width=None, exe_limit=None):
    if os.path.isdir(input_path):
        exe_count = 0
        for root, directories, files in os.walk(input_path):
            for filename in files:
                if filename.lower().endswith('.exe'):
                    if exe_limit is not None and exe_count >= exe_limit:
                        return  # Stop processing once the limit is reached
                    file_path = os.path.join(root, filename)
                    createImage(file_path, output_dir_grey, 'L', width)
                    createImage(file_path, output_dir_rgb, 'RGB', width)
                    exe_count += 1
    elif os.path.isfile(input_path) and input_path.lower().endswith('.exe'):
        createImage(input_path, output_dir_grey, 'L', width)
        createImage(input_path, output_dir_rgb, 'RGB', width)
    else:
        print("The specified path does not exist or contains no .exe files.")
